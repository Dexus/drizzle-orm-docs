---
import type { IHeading, TreeNode } from "../../types/astro";
import CollapseToggleButton from "./DocsSidebar/CollapseToggleButton.astro";

interface Props {
  headings?: IHeading[];
  tree: TreeNode[];
  slug: string;
  forLanding?: boolean;
}

const { headings, slug = "", tree, forLanding = false } = Astro.props;
const isActive = (path: string) => {
  const pathArray = path.split("/");
  const slugArray = slug.split("/");
  return pathArray.every((element, index) => element === slugArray[index]);
};

function modifyTree(tree: TreeNode[]): TreeNode[] {
  const modifiedTree: TreeNode[] = [];
  let currentCollapsableNode: TreeNode | null = null;

  for (const node of tree) {
    if (node.type === "collapsable") {
      currentCollapsableNode = { ...node, items: [] };
      modifiedTree.push(currentCollapsableNode);
    } else if (node.type === "separator") {
      currentCollapsableNode = null;
      modifiedTree.push(node);
    } else if (currentCollapsableNode) {
      currentCollapsableNode.items.push(node);
    } else {
      modifiedTree.push(node);
    }
  }

  return modifiedTree;
}


const groupedTree = tree.map(t => ({...t, children: modifyTree(t.children)}));

---

<div class="nav-items">
  {
    groupedTree
      .filter((t) => forLanding || isActive(t.name))
      .map((t) =>
        t.children?.map((n, index) => (
          <Fragment key={n.name}>
            {n.type === "separator" && (
              <div class="nav-separator">{n.title}</div>
            )}
            {n.type === "collapsable" && (
              <div
                class:list={["nav-items-collapsable", n.items.some(c => isActive(`${t.name}/${c.name}`)) ? 'expanded-permanent' : '']}
                id={n.title}
                style={`max-height: ${n.items.slice(0, 6).reduce((prev, cur) => cur.type === 'dot-separator' ? prev + 12 : prev + 26.5, 0) + 61}px`}
              >
                <div class="nav-separator nav-separator-collapsable">
                  {n.title}
                  <CollapseToggleButton />
                </div>
                {n.items.map((n) => (
                  <>
                    {n.type === "dot-separator" && (
                      <div class="dot-separator"></div>
                    )}
                    {n.type === "mdx" && (
                      <a
                        data-nav-index={index}
                        class:list={[
                          isActive(`${t.name}/${n.name}`)
                            ? "nav-item--active"
                            : "nav-item",
                          "nav-item-1",
                        ]}
                        href={`/${t.name}/${n.name}`}
                      >
                        {n.title}
                      </a>
                    )}
                    {n.type === "subDir" && (
                      <a
                        data-nav-index={index}
                        class:list={[
                          isActive(`${t.name}/${n.name}`)
                            ? "nav-item--active"
                            : "nav-item",
                          "nav-item-1",
                        ]}
                        href={`/${t.name}/${n.name}/${n.children?.[0].name}`}
                      >
                        {n.title}
                      </a>
                    )}
                    {n.type === "withDialects" && (
                      <a
                        data-nav-index={index}
                        data-href={`/${t.name}/${n.name}`}
                        class:list={[
                          isActive(`${t.name}/${n.name}`)
                            ? "nav-item--active"
                            : "nav-item",
                          "nav-item-1",
                        ]}
                      >
                        {n.title}
                      </a>
                    )}
                    {headings &&
                      slug &&
                      slug.split("/")[1] === n.name &&
                      slug === `${t.name}/${n.name}` && (
                        <div data-headings>
                          {headings.map((heading) => (
                            <a
                              data-slug={heading.slug}
                              class:list={["nav-toc-item", "heading-2"]}
                              href={`#${heading.slug}`}
                            >
                              {heading.text}
                            </a>
                          ))}
                        </div>
                      )}
                    {n.children?.map((c) => (
                      <Fragment>
                        {headings &&
                          slug &&
                          slug.split("/")[2] === c.name &&
                          slug === `${t.name}/${n.name}/${c.name}` && (
                            <div data-headings>
                              {headings.map((heading) => (
                                <a
                                  data-slug={heading.slug}
                                  class:list={["nav-toc-item", "heading-2"]}
                                  href={`#${heading.slug}`}
                                >
                                  {heading.text}
                                </a>
                              ))}
                            </div>
                          )}
                      </Fragment>
                    ))}
                  </>
                ))}
                <div class="fade"></div>
                <div class="expand-container">
                  <button class="expand-container-button">Expand</button>
                </div>
              </div>

            )}
            {n.type === "dot-separator" && (
              <div class="dot-separator"></div>
            )}
            {n.type === "mdx" && (
              <a
                data-nav-index={index}
                class:list={[
                  isActive(`${t.name}/${n.name}`)
                    ? "nav-item--active"
                    : "nav-item",
                  "nav-item-1",
                ]}
                href={`/${t.name}/${n.name}`}
              >
                {n.title}
              </a>
            )}
            {n.type === "subDir" && (
              <a
                data-nav-index={index}
                class:list={[
                  isActive(`${t.name}/${n.name}`)
                    ? "nav-item--active"
                    : "nav-item",
                  "nav-item-1",
                ]}
                href={`/${t.name}/${n.name}/${n.children?.[0].name}`}
              >
                {n.title}
              </a>
            )}
            {n.type === "withDialects" && (
              <a
                data-nav-index={index}
                data-href={`/${t.name}/${n.name}`}
                class:list={[
                  isActive(`${t.name}/${n.name}`)
                    ? "nav-item--active"
                    : "nav-item",
                  "nav-item-1",
                ]}
              >
                {n.title}
              </a>
            )}
            {headings &&
              slug &&
              slug.split("/")[1] === n.name &&
              slug === `${t.name}/${n.name}` && (
                <div data-headings>
                  {headings.map((heading) => (
                    <a
                      data-slug={heading.slug}
                      class:list={["nav-toc-item", "heading-2"]}
                      href={`#${heading.slug}`}
                    >
                      {heading.text}
                    </a>
                  ))}
                </div>
              )}
            {n.children?.map((c) => (
              <Fragment>
                {headings &&
                  slug &&
                  slug.split("/")[2] === c.name &&
                  slug === `${t.name}/${n.name}/${c.name}` && (
                    <div data-headings>
                      {headings.map((heading) => (
                        <a
                          data-slug={heading.slug}
                          class:list={["nav-toc-item", "heading-2"]}
                          href={`#${heading.slug}`}
                        >
                          {heading.text}
                        </a>
                      ))}
                    </div>
                  )}
              </Fragment>
            ))}
          </Fragment>
        )),
      )
  }
</div>
<script>
  import throttle from "lodash.throttle";
  import handleAnchorHighlighting from "@/utils/handleAnchorHighlighting";
  import updateDialectLinks from "@/utils/updateDialectLinks";

  document.addEventListener("astro:page-load", () => {
    const container = document.querySelector(".documentation-content-wrap")!;
    const anchors = document.querySelectorAll<HTMLElement>("h2, h3");
    const links = document.querySelectorAll<HTMLElement>("[data-slug]");
    let expandedSections: string[] = JSON.parse(localStorage.getItem('expandedSections'));

    const updateCollapsedSections = () => {
      document.querySelectorAll('.nav-items-collapsable').forEach((section) => {
        if (expandedSections.find((v) => v === section.id)) {
          section.classList.add('expanded');
        } else {
          section.classList.remove('expanded');
        }
      })
    }

    const handleToggleSection = (id: string) => {
      if (expandedSections?.find((v) => v === id)) {
        expandedSections = expandedSections.filter((v) => v !== id);
      } else {
        expandedSections = expandedSections ? [...expandedSections, id] : [id];
      }

      updateCollapsedSections();
      localStorage.setItem('expandedSections', JSON.stringify(expandedSections));
    }

    document.querySelectorAll('.section-collapse-button').forEach(e => {
      e.addEventListener('click', () => {
        handleToggleSection(e.parentElement.parentElement.id)
      })
    })

    document.querySelectorAll('.expand-container-button').forEach(e => {
      e.addEventListener('click', () => {
        handleToggleSection(e.parentElement.parentElement.id)
      })
    })

    const updateLinks = () => {
      const activeAnchors = handleAnchorHighlighting({
        viewportHeight: window.innerHeight,
        anchors: [...anchors].map((anchor) => ({
          id: anchor.id,
          offsetTop: anchor.offsetTop,
        })),
        scrollTop: container.scrollTop,
      });

      links.forEach((link) => {
        const slug = link.dataset.slug;
        if (!slug) return;
        link.classList.toggle(
          "nav-toc-item--active",
          activeAnchors.includes(slug),
        );
        link.classList.toggle("nav-toc-item", !activeAnchors.includes(slug));
      });
    };

    if (container && links) {
      container.addEventListener("scroll", throttle(updateLinks, 80));
      updateLinks();
    }

    updateDialectLinks();
  });
</script>
