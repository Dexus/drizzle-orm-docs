---
import EndOfContent from '@components/layout/EndOfContent.astro';
import GlobalStyles from '@components/layout/GlobalStyles.astro';
import MDXStyles from '@components/layout/MDXStyles.astro';
import Banner from '@components/layout/Banner.astro';
import BaseHead from '@components/baseHead/BaseHead.astro';
import Header from '../components/layout/Header.astro';
import RightAside from '../components/layout/RightAside.astro';
import DocsSidebar from '../components/layout/DocsSidebar/DocsSidebar.astro';
import getContentTree from '@/utils/getContentTree';
import type { IHeading } from '@/types/astro';

interface Props {
  customTitle?: string;
  customSlug?: string;
  description?: string;
  headings: IHeading[];
}

const { customTitle, headings, description, customSlug } = Astro.props;
const { slug } = Astro.params;
const { tree, filteredHeadings, title } = await getContentTree({
  headings,
  slug,
});
---

<!doctype html>
<html lang="en">
  <BaseHead title={`Drizzle ORM - ${customTitle || title}`} description={description} />
  <body class="banner-shown">
    <GlobalStyles />
    <MDXStyles />
    <Banner />
    <Header />
    <main class="documentation-container">
      <DocsSidebar tree={tree} customSlug={customSlug} headings={filteredHeadings} />
      <div class="documentation-content-wrap scrollbar">
        <div class="documentation-content">
          <slot />
          <EndOfContent />
          <!-- <Footer /> -->
        </div>
      </div>
      <div class="right-aside-container">
        <RightAside />
      </div>
    </main>
    <style>
      .right-aside-container {
        position: relative;
      }

      @media screen and (max-width: 1024px) {
        .right-aside-container {
          display: none;
        }
      }
    </style>
    <style is:global>
        body {
            margin-top: 104px;
        }
      .documentation-content-wrap {
        width: 100%;
        overflow-y: scroll;
        overflow-x: hidden;
      }

      .navigation_nav_container_blur {
        -webkit-backdrop-filter: blur(12px);
        backdrop-filter: blur(12px);
        pointer-events: none;
        position: absolute;
        z-index: -1;
        height: 100%;
        width: 100%;
        background-color: hsla(0, 0%, 100%, 0.85);
        box-shadow:
          0 0 0 0 transparent,
          0 0 0 0 transparent,
          0 2px 4px 0 rgba(0, 0, 0, 0.02),
          0 1px 0 0 rgba(0, 0, 0, 0.06);
      }
      .navigation_nav_content_wrap {
        margin-left: auto;
        margin-right: auto;
        display: flex;
        height: 64px;
        max-width: 1440px;
        align-items: center;
        gap: 8px;
        padding-left: max(env(safe-area-inset-left), 24px);
        padding-right: max(env(safe-area-inset-right), 24px);
      }
      .documentation-container {
        max-width: 1440px;
        width: 100%;
        display: flex;
        margin: 0 auto;
        padding-left: 24px;
        padding-right: 22px;
      }

      .documentation-content {
        padding-left: 48px;
        padding-right: 48px;
        padding-top: 1rem;
        width: 100%;
        position: relative;
      }

      @media screen and (max-width: 1279px) {
        .documentation-content {
          padding-left: 16px;
          padding-right: 16px;
        }
      }

      @media screen and (max-width: 1024px) {
        .right-aside-container {
          display: none;
        }

        .documentation-content {
            padding-right: 0;
        }

      }

      @media screen and (max-width: 768px) {
        .documentation-content {
          padding-left: 16px;
          padding-right: 16px;
          padding-top: 1rem;
          width: 100%;
        }

          .documentation-container {
             padding: 0;
          }
      }
    </style>
    <script>
      const hash = window.location.hash;
      if (hash !== '') {
        const targetElement = document.querySelector(hash);
        if (targetElement) {
          setTimeout(() => targetElement.scrollIntoView(), 10);
        }
      }
    </script>
    <script is:inline>
      const changeNpmTab = () => {
        const packageManagers = ['npm', 'yarn', 'pnpm', 'bun'];

        let packageManagerIndex = packageManagers.indexOf(packageManager);

        const updateUI = (index) => {
          npmContent.forEach((element) => {
            Array.from(element.children).forEach((child, i) => {
              child.classList.toggle('hidden', i !== index);
            });
          });
          npmTabs.forEach((element) => {
            Array.from(element.children).forEach((child, i) => {
              child.classList.toggle('npm__tab--active', i === index);
            });
          });
        };

        const npmContent = document.querySelectorAll('.npm__content');
        const npmTabs = document.querySelectorAll('.npm__tabs');

        npmContent.forEach((content) => {
          Array.from(content.children).forEach((child, index) => {
            child.classList.toggle('hidden', index !== packageManagerIndex);
          });
        });

        npmTabs.forEach((tab) => {
          Array.from(tab.children).forEach((child, index) => {
            child.classList.toggle('npm__tab--active', index === packageManagerIndex);
            child.addEventListener('click', () => {
              packageManager = packageManagers[index];
              localStorage.setItem('package-manager', packageManager);
              updateUI(index);
            });
          });
        });
      }

      const updateCollapsedSections = () => {
        document.querySelectorAll('.nav-items-collapsable').forEach((section) => {
          if (Number(section.getAttribute("data-active-inner-item")) && !expandedSections.find((v) => v === section.id)) {
            expandedSections = [...expandedSections, section.id]
          }
          if (expandedSections.find((v) => v === section.id)) {
            section.classList.add('expanded');
          } else {
            section.classList.remove('expanded');
          }
        })

        localStorage.setItem('expandedSections', JSON.stringify(expandedSections));
      }

      const scrollSidebar = () => {
        const expandedSections = localStorage.getItem("expandedSections")
          ? JSON.parse(localStorage.getItem("expandedSections"))
      : [];

        document.querySelectorAll(".nav-items-collapsable").forEach((section) => {
          if (expandedSections.find((v) => v === section.id)) {
            section.classList.add("expanded");
          } else {
            section.classList.remove("expanded");
          }
        });

        const leftSidebar = document.querySelector(".aside-scroll");
        const navItems = document.querySelectorAll("[data-nav-index]");
        const headingsContainer = document.querySelector("[data-headings]");
        const headingsContainerHeight = headingsContainer?.clientHeight || 0;
        let itemIndex = 0;

        const activeNavItem = Array.from(navItems).find((item) => {
          return item.classList.contains("nav-item--active");
        });

        if (activeNavItem) {
          itemIndex = +(activeNavItem.getAttribute("data-nav-index") || 0);
        }
        if (navItems && leftSidebar) {
          navItems.forEach((item) => {
            item.addEventListener("click", () => {
              const nextIndex = +item.getAttribute("data-nav-index");
              const scrollTop =
                leftSidebar.scrollTop -
                (nextIndex > itemIndex ? headingsContainerHeight : 0);
              localStorage.setItem("sidebar-scroll", scrollTop.toString());
            });
          });

          const findPreviousNavSeparator = (element) => {
            if (!element) return null;

            let previousElement = element.previousElementSibling;

            while (previousElement) {
              if (previousElement.classList.contains("nav-separator")) {
                return previousElement;
              }
              previousElement =
                previousElement.previousElementSibling;
            }

            return null;
          };

          const leftSidebarScroll = localStorage.getItem("sidebar-scroll");
          if (leftSidebarScroll !== null) {
            leftSidebar.scrollTop = parseInt(leftSidebarScroll, 10);
          } else if (activeNavItem) {
            leftSidebar.scrollTop = findPreviousNavSeparator(activeNavItem).offsetTop;
          }
        }
      };

      scrollSidebar();
      updateCollapsedSections();
      changeNpmTab();
    </script>
    <script>
      class RemElement extends HTMLElement {
        constructor() {
          super();
        }
      }

      // Регистрация нового элемента
      customElements.define('rem', RemElement);
      customElements.define('rem025', RemElement);
      customElements.define('rem05', RemElement);
    </script>
    <script>
      document.addEventListener('astro:page-load', () => {
        document.querySelectorAll("h2").forEach((el) => {
          if (el.innerText === '---') {
            el.classList.add('hidden-separator')
          }
        })
      })
    </script>
    <style is:global>
      rem {
          display: block;
          height: 1rem;
      }

      rem025 {
          display: block;
          height: 0.25rem;
      }

      rem05 {
          display: block;
          height: 0.5rem;
      }

      .hidden-separator {
          width: 0;
          height: 0;
          pointer-events: none;
          overflow: hidden;
      }
    </style>
  </body>
</html>
